tasks.register("showProjects") {
    doLast {
        println("javaProjects:$javaProjects")
    }
}

ext {
    /*1.versions*/

    /*for application boot:jar*/
    springBootVersion = "2.7.5"
    /*2. projects*/

    javaLib = [

    ]

    javaProjects = []
    javaProjects.addAll(javaLib)
}


configure(javaProjects) {
    project ->
        {
            apply plugin: "java"
            apply plugin: "io.freefair.lombok"


            java {
                toolchain {
                    languageVersion = JavaLanguageVersion.of(17)
                }
            }


            tasks.withType(JavaCompile) {
                options.encoding = 'UTF-8'
            }

            group = "com.impassive"


            test {
                useJUnit()
                systemProperty("java.awt.headless", "true")
                systemProperty("testGroups", project.properties.get("testGroups"))
                systemProperty("io.netty.leakDetection.level", "paranoid")
                systemProperty("io.netty5.leakDetectionLevel", "paranoid")
                systemProperty("io.netty5.leakDetection.targetRecords", "32")
                systemProperty("io.netty5.buffer.lifecycleTracingEnabled", "true")
                systemProperty("io.netty5.buffer.leakDetectionEnabled", "true")
                systemProperty("io.netty.tryReflectionSetAccessible", "true")
                jvmArgs([
                        "--add-opens=java.base/java.lang=ALL-UNNAMED",
                        "--add-opens=java.base/java.nio=ALL-UNNAMED",
                        "--add-opens=java.base/jdk.internal.misc=ALL-UNNAMED",
                        "--add-opens=java.base/java.util=ALL-UNNAMED"])
            }

        }
}


configure(javaLib) {
    project ->
        {
            apply plugin: "java-library"
            apply plugin: "maven-publish"


            publishing {
                publications {
                    maven(MavenPublication) {
                        versionMapping {
                            usage('java-api') {
                                fromResolutionResult()
                            }
                            usage('java-runtime') {
                                fromResolutionResult()
                            }
                        }
                        from(components.java)
                    }
                }
                repositories {
                    maven {
                        credentials {
                            username = "$mavenUsername"
                            password = "$mavenPassword"
                        }
                        url = version.endsWith('SNAPSHOT') ? "$snapshotsRepoUrl" : "$releasesRepoUrl"
                    }
                }
            }

        }
}